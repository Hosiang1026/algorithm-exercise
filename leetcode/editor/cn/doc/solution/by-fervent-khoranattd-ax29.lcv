### 解题思路

高位开始计算 就正好是 两数的反转数相加

### 代码

* java

```java
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        // 起始节点
        ListNode start = new ListNode();

        ListNode listNode = start;

        // 是否进1
        int carry = 0;
        while (l1 != null || l2 != null || carry != 0) {

            // 高位开始计算 就正好是 两数的反转数相加
            //  2 4 9
            // +5 6 4 9
            // 如果反过来看，是不是就正好是
            //  9 4 6 5
            // +  9 4 2

            // 可能不存在
            int num1 = l1 != null ? l1.val : 0;

            // 可能不存在
            int num2 = l2 != null ? l2.val : 0;

            int sum = num1 + num2 + carry;

            // 考虑是否 进1 的问题
            carry = sum >= 10 ? 1 : 0;

            listNode.next = new ListNode(sum % 10);
            listNode = listNode.next;

            if (l1 != null) {
                l1 = l1.next;
            }
            if (l2 != null) {
                l2 = l2.next;
            }
        }
        return start.next;
    }
}
```

